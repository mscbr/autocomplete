{"version":3,"sources":["autocomplete/Autocomplete.tsx","custom_hooks/useRMCharService.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["Autocomplete","props","value","label","onChange","suggestions","isLoading","sort","useState","placeholder","setPlaceholder","activeSuggestion","setActiveSuggestion","filteredSuggestions","setFilteredSuggestions","inputId","Math","floor","Date","now","textInputRef","useRef","listRef","suggestionFiltering","suggestionArr","filterVal","filter","suggestion","ind","arr","regex","RegExp","replace","toLowerCase","indexOf","test","onClick","e","callback","current","contains","target","targetSuggestion","useEffect","document","addEventListener","removeEventListener","a","b","localeCompare","className","htmlFor","id","ref","type","handleChange","onKeyDown","keyCode","preventDefault","length","onBlur","focus","slice","style","height","overflow","map","onMouseOver","key","useRMCharService","val","status","result","setResult","fetch","then","res","json","payload","catch","error","App","setSuggestions","setValue","service","results","item","name","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5f80d46.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./Autocomplete.css\";\n\ninterface Props {\n  value: string;\n  label: string;\n  placeholder?: string;\n  onChange: (val: string) => void;\n  suggestions: string[];\n  isLoading?: boolean;\n  sort?: boolean;\n}\nconst Autocomplete: React.FC<Props> = props => {\n  // destructuring\n  const {\n    value,\n    label,\n    onChange,\n    suggestions,\n    isLoading,\n    sort\n    // placeholder is used as props.placeholder\n  } = props;\n\n  // assigning placeholder's value from a prop\n  const [placeholder, setPlaceholder] = useState(() => props.placeholder || \"\");\n  // which of suggestions is currently selected\n  const [activeSuggestion, setActiveSuggestion] = useState(0);\n  // array of data filtered out based on current input value\n  const [filteredSuggestions, setFilteredSuggestions] = useState<string[]>([]);\n\n  // id for associating label/input - it can be changed to id assignment from parent\n  const inputId = `id-${Math.floor(Date.now() / 1000)}`;\n  // ref for text-input\n  const textInputRef = useRef<HTMLInputElement>(null);\n  // ref for suggestions list\n  const listRef = useRef<HTMLUListElement>(null);\n\n  const suggestionFiltering = (suggestionArr: string[], filterVal: string) => {\n    return suggestionArr.filter((suggestion, ind, arr) => {\n      // regexp is matching the exact value from the beginning\n      // .replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\") - escaping special characters\n      const regex = new RegExp(\n        `^${filterVal.replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\")}`,\n        \"i\"\n      );\n\n      // return suggestion if:\n      // is input value\n      // input value !== suggestion\n      // + do not display duplicated suggestion\n      return filterVal &&\n        filterVal.toLowerCase() !== suggestion.toLowerCase() &&\n        arr.indexOf(suggestion) == ind\n        ? regex.test(suggestion)\n        : \"\";\n    });\n  };\n\n  // wrapper function in order to handle <HTMLInputElement> ChangeEvent type\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    callback: (val: string) => void\n  ) => {\n    return callback(e.target.value);\n  };\n\n  // handling click events inside <ul>/<li>\n  const onClick = (\n    e: React.MouseEvent<HTMLLIElement, MouseEvent> | MouseEvent,\n    callback: (val: string) => void\n  ) => {\n    if (\n      filteredSuggestions[activeSuggestion] &&\n      listRef.current &&\n      listRef.current.contains(e.target as Node)\n    ) {\n      // inside suggestions <ul> click\n      const targetSuggestion = filteredSuggestions[activeSuggestion];\n      setActiveSuggestion(0);\n      setFilteredSuggestions([]);\n\n      return callback(targetSuggestion);\n    } else if (listRef.current && !listRef.current.contains(e.target as Node)) {\n      // handling case if click event is outside of autocomplte suggestions <ul>\n      setActiveSuggestion(0);\n      setFilteredSuggestions([]);\n    }\n  };\n\n  const onKeyDown = (\n    e: React.KeyboardEvent<HTMLInputElement>,\n    callback: (val: string) => void\n  ) => {\n    // handling KeyboardEvents from text input element\n    // autocomplete <ul> is only active with foccused target text input\n    switch (e.keyCode) {\n      case 38:\n        // arrow up\n        e.preventDefault();\n        return setActiveSuggestion(\n          activeSuggestion - 1 >= 0\n            ? activeSuggestion - 1\n            : filteredSuggestions.length - 1\n        );\n      case 40:\n        // arrow down\n        e.preventDefault();\n        return setActiveSuggestion(\n          activeSuggestion + 1 > filteredSuggestions.length - 1\n            ? 0\n            : activeSuggestion + 1\n        );\n      case 13:\n      case 39:\n        // enter & arrow right\n        if (filteredSuggestions[activeSuggestion]) {\n          const targetSuggestion = filteredSuggestions[activeSuggestion];\n          setActiveSuggestion(0);\n          setFilteredSuggestions([]);\n\n          return callback(targetSuggestion);\n        }\n        return;\n      case 9:\n        // tab\n        e.preventDefault();\n        if (filteredSuggestions[activeSuggestion]) {\n          const targetSuggestion = filteredSuggestions[activeSuggestion];\n          setActiveSuggestion(0);\n          setFilteredSuggestions([]);\n\n          return callback(targetSuggestion);\n        }\n        // returning false in order to prevent default in IE\n        return false;\n      case 27:\n        // esc\n        setActiveSuggestion(0);\n        return setFilteredSuggestions([]);\n      default:\n        return;\n    }\n  };\n\n  // handling clicking outside of suggestion <ul>\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", (e: MouseEvent) =>\n      onClick(e, onChange)\n    );\n    // cleanup\n    return () => {\n      document.removeEventListener(\"mousedown\", (e: MouseEvent) =>\n        onClick(e, onChange)\n      );\n    };\n  }, []);\n\n  // filtering data on props values change - suggestions, value, sort\n  useEffect(() => {\n    if (sort) {\n      // if sort === true, apply ascending alphabetical sorting\n      setFilteredSuggestions(\n        suggestionFiltering(\n          [...suggestions].sort((a, b) => a.localeCompare(b)),\n          value\n        )\n      );\n    } else {\n      setFilteredSuggestions(suggestionFiltering(suggestions, value));\n    }\n  }, [suggestions, value, sort]);\n\n  return (\n    <>\n      <div className=\"autocomplete-wrapper\">\n        <div className=\"autocomplete-text-input-wrapper\">\n          <label htmlFor={inputId} className=\"autocomplete-text-input-label\">\n            {label || \"Label\"}\n          </label>\n          <input\n            id={inputId}\n            ref={textInputRef}\n            className=\"autocomplete-text-input\"\n            type=\"text\"\n            value={value}\n            onChange={e => handleChange(e, onChange)}\n            onKeyDown={e => onKeyDown(e, onChange)}\n            onBlur={() => {\n              // seting back placeholder to the initial value\n              return setPlaceholder(props.placeholder || \"\");\n            }}\n          />\n          <span\n            className=\"autocomplete-input-placeholder\"\n            onClick={() => {\n              setPlaceholder(\"\");\n              return textInputRef.current && textInputRef.current.focus();\n            }}\n          >\n            {/* displaying placeholder logic\n                        if not value placeholder then placeholder\n                        else if selected suggestion then input value + active suggestion slice\n                        else ''\n                    */}\n            {!value && placeholder\n              ? placeholder\n              : filteredSuggestions[activeSuggestion]\n              ? value +\n                filteredSuggestions[activeSuggestion].slice(value.length)\n              : \"\"}\n          </span>\n          {/* if isLoading display loading spinner */}\n          {isLoading && <div className=\"loader\"></div>}\n        </div>\n        {filteredSuggestions && !isLoading && (\n          <div className=\"autocomplete-list-wrapper\">\n            <ul\n              ref={listRef}\n              // inline handling of long suggestions list\n              style={\n                filteredSuggestions.length > 8\n                  ? { height: 300, overflow: \"auto\" }\n                  : {}\n              }\n            >\n              {filteredSuggestions.map((suggestion, ind) => (\n                <li\n                  className={`${\n                    ind === activeSuggestion ? \"active-suggestion\" : \"\"\n                  }`}\n                  onClick={e => onClick(e, onChange)}\n                  onMouseOver={() => setActiveSuggestion(ind)}\n                  key={`${suggestion}${ind}`}\n                >\n                  {suggestion}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Autocomplete;\n","import { useEffect, useState } from 'react'\nimport { Character } from '../custom_fetch_types/Character'\nimport { Service } from '../custom_fetch_types/Service'\n\n// interface for array of fetched items\nexport interface Characters {\n    results: Character[];\n}\n\nconst useRMCharService = (val: string) => {\n    // initial state\n    const [result, setResult] = useState<Service<Characters>>({\n        status: 'init'\n    });\n\n    // fetching when text input value changed\n    useEffect(() => {\n        if (val) {\n            // reseting status before fetch start\n            setResult({ status: 'loading' });\n            // fetch method is only use for presentational purposes\n            fetch(`https://rickandmortyapi.com/api/character/?name=${val}`)\n                .then(res => res.json())\n                .then(res => setResult({ status: 'loaded', payload: res}))\n                .catch(error => setResult({ status: 'error', error }));\n        }\n    }, [val]);\n\n    return result;\n};\n\nexport default useRMCharService","import React, { useState, useEffect } from \"react\";\nimport Autocomplete from \"./autocomplete/Autocomplete\";\nimport useRMCharService from \"./custom_hooks/useRMCharService\";\nimport \"./App.css\";\n\nconst App = () => {\n  // initial state declarations\n  const [suggestions, setSuggestions] = useState([\"\"]);\n  const [value, setValue] = useState(\"\");\n\n  // custom hook for fetching Rick&Morty API\n  // request is re-triggerd when value parameter changes\n  const service = useRMCharService(value);\n\n  // handling API request status change\n  useEffect(() => {\n    if (service.status === \"loading\") {\n      setSuggestions([\"\"]);\n    }\n    if (service.status === \"loaded\" && service.payload.results) {\n      setSuggestions(service.payload.results.map(item => item.name));\n    }\n    if (service.status === \"error\") {\n      setSuggestions([]);\n    }\n  }, [service.status]);\n\n  return (\n    <div className=\"App\">\n      <Autocomplete\n        value={value}\n        label=\"Autocomplete\"\n        placeholder=\"\"\n        onChange={setValue}\n        suggestions={suggestions}\n        isLoading={service.status === \"loading\"}\n        sort={false}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}